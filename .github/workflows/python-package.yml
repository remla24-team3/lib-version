name: Build, Test, and Publish Python Package

on:
  push:
    branches:
      - main
      - beta
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: write

    steps:
    - uses: actions/checkout@v4
      with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }} 

    - name: Extract version information
      id: vars
      run: |
        CURRENT_TAG=$((git tag -l --sort=-v:refname | head -n 1) || echo "v0.0.0")
        CURRENT_TAG=${CURRENT_TAG#v}
        IFS='.' read -ra ADDR <<< "$CURRENT_TAG"
        
        PATCH=$((ADDR[2] + 1))
        VERSION="${ADDR[0]}.${ADDR[1]}.$PATCH"
        
        if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
          VERSION="v$VERSION"
        elif [[ "${GITHUB_REF}" == refs/heads/main ]]; then
          VERSION="v$VERSION"
        elif [[ "${GITHUB_REF}" == refs/heads/beta/* ]]; then
          VERSION="v$VERSION-beta-$(date +%Y%m%d)"
        else
          VERSION="v$VERSION"
        fi
        
        echo "VERSION=$VERSION" >> $GITHUB_ENV
      
    - name: Create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VERSION: ${{ env.VERSION }}
        REPO: ${{ github.repository }}
      run: |
        IS_PRERELEASE=false
        if [[ $VERSION == *-* ]]; then
          IS_PRERELEASE=true
        fi
        gh release create "$VERSION" \
            --repo="$REPO" \
            --title="${REPO#*/} ${VERSION#v}" \
            --generate-notes \
            $([[ $IS_PRERELEASE == true ]] && echo "--prerelease")

    